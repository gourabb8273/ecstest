name: Deploy User Service

on:
  push:
    paths:
      - "user-service/**"   # Triggered only when user-service code changes

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest

    steps:
      # Step 1: Check out the latest code
      - name: Checkout Code
        uses: actions/checkout@v3

      # Step 2: Set up Docker Buildx for building multi-platform images
      - name: Set Up Docker
        uses: docker/setup-buildx-action@v2

      # Step 3: Log in to Amazon ECR
      - name: Log in to Amazon ECR
        id: ecr-login
        uses: aws-actions/amazon-ecr-login@v1
        with:
          mask-password: false
          registry-type: private
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_REGION: ap-south-1

      # Step 4: Build the Docker image and push it to ECR
      - name: Build and Push User Service Image
        run: |
          IMAGE_URI="${{ secrets.ECR_URI }}/user-service:latest"
          docker build -t $IMAGE_URI ./user-service
          docker push $IMAGE_URI

      # Step 5: Update the task definition with the new image URI
      - name: Update Task Definition
        run: |
          sed -i 's#<IMAGE_URI>#${{ secrets.ECR_URI }}/user-service:latest#g' ./user-service/task-def.json

      # Step 6: Attach CloudWatch Logs permissions to ECS Task Execution Role
      - name: Attach CloudWatch Logs Permissions to Task Execution Role
        run: |
          aws iam attach-role-policy \
            --role-name ecsTaskExecutionRole \
            --policy-arn arn:aws:iam::aws:policy/CloudWatchLogsFullAccess
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_REGION: ap-south-1

      # Step 7: Register the updated task definition to ECS
      - name: Register Task Definition
        run: |
          aws ecs register-task-definition \
            --cli-input-json file://./user-service/task-def.json \
            --region ap-south-1
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_REGION: ap-south-1

      # Step 8: Check if the ECS service already exists
      - name: Check if Service Exists
        id: check-service
        run: |
          SERVICE_STATUS=$(aws ecs describe-services \
            --cluster my-microservices \
            --services user-service \
            --query 'services[0].status' \
            --output text --region ap-south-1)
          echo "Service Status: $SERVICE_STATUS"
          if [[ "$SERVICE_STATUS" == "ACTIVE" ]]; then
            echo "Service exists, preparing for update."
            echo "::set-output name=service-exists::true"
          else
            echo "Service does not exist, will create a new one."
            echo "::set-output name=service-exists::false"
          fi
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_REGION: ap-south-1

          # Step 9: Create or Update ECS service and ensure ALB integration
      - name: Create or Update ECS Service with ALB
        run: |
          if [ "${{ steps.check-service.outputs.service-exists }}" == "true" ]; then
            echo "Updating ECS service with ALB..."
            aws ecs update-service \
              --cluster my-microservices \
              --service user-service \
              --task-definition user-service:1 \
              --desired-count 1 \
              --load-balancers "[{\"targetGroupArn\":\"arn:aws:elasticloadbalancing:ap-south-1:980921736494:targetgroup/ecs-tg/37c661d494e4ce68\",\"containerName\":\"user-service\",\"containerPort\":3000}]" \
              --region ap-south-1
          else
            echo "Creating ECS service with ALB..."
            aws ecs create-service \
              --cluster my-microservices \
              --service-name user-service \
              --task-definition user-service:1 \
              --desired-count 1 \
              --launch-type EC2 \
              --load-balancers "[{\"targetGroupArn\":\"arn:aws:elasticloadbalancing:ap-south-1:980921736494:targetgroup/ecs-tg/37c661d494e4ce68\",\"containerName\":\"user-service\",\"containerPort\":3000}]" \
              --region ap-south-1
          fi
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_REGION: ap-south-1

      # Step 10: Verify Target Registration in ALB Target Group
      - name: Verify Targets in ALB Target Group
        run: |
          echo "Checking target registration status in ALB target group..."
          aws elbv2 describe-target-health \
            --target-group-arn arn:aws:elasticloadbalancing:ap-south-1:980921736494:targetgroup/ecs-tg/37c661d494e4ce68 \
            --region ap-south-1
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_REGION: ap-south-1

      # Step 11: Register Missing Targets (if needed)
      - name: Register Targets Manually
        run: |
          INSTANCE_ID=$(aws ec2 describe-instances \
            --filters "Name=tag:Name,Values=your-ecs-instance-tag" \
            --query "Reservations[].Instances[].InstanceId" \
            --output text --region ap-south-1)
          PORT=3000
          aws elbv2 register-targets \
            --target-group-arn arn:aws:elasticloadbalancing:ap-south-1:980921736494:targetgroup/ecs-tg/37c661d494e4ce68 \
            --targets Id=$INSTANCE_ID,Port=$PORT \
            --region ap-south-1
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_REGION: ap-south-1
